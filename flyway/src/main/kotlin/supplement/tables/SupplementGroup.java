/*
 * This file is generated by jOOQ.
 */
package supplement.tables;


import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import supplement.Keys;
import supplement.Public;
import supplement.tables.Supplements.SupplementsPath;
import supplement.tables.records.SupplementGroupRecord;


/**
 * サプリメントグループテーブル
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SupplementGroup extends TableImpl<SupplementGroupRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.supplement_group</code>
     */
    public static final SupplementGroup SUPPLEMENT_GROUP = new SupplementGroup();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SupplementGroupRecord> getRecordType() {
        return SupplementGroupRecord.class;
    }

    /**
     * The column <code>public.supplement_group.name</code>. サプリメントグループ名
     */
    public final TableField<SupplementGroupRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "サプリメントグループ名");

    /**
     * The column <code>public.supplement_group.created_at</code>.
     */
    public final TableField<SupplementGroupRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.supplement_group.updated_at</code>.
     */
    public final TableField<SupplementGroupRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private SupplementGroup(Name alias, Table<SupplementGroupRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private SupplementGroup(Name alias, Table<SupplementGroupRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("サプリメントグループテーブル"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.supplement_group</code> table reference
     */
    public SupplementGroup(String alias) {
        this(DSL.name(alias), SUPPLEMENT_GROUP);
    }

    /**
     * Create an aliased <code>public.supplement_group</code> table reference
     */
    public SupplementGroup(Name alias) {
        this(alias, SUPPLEMENT_GROUP);
    }

    /**
     * Create a <code>public.supplement_group</code> table reference
     */
    public SupplementGroup() {
        this(DSL.name("supplement_group"), null);
    }

    public <O extends Record> SupplementGroup(Table<O> path, ForeignKey<O, SupplementGroupRecord> childPath, InverseForeignKey<O, SupplementGroupRecord> parentPath) {
        super(path, childPath, parentPath, SUPPLEMENT_GROUP);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SupplementGroupPath extends SupplementGroup implements Path<SupplementGroupRecord> {
        public <O extends Record> SupplementGroupPath(Table<O> path, ForeignKey<O, SupplementGroupRecord> childPath, InverseForeignKey<O, SupplementGroupRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SupplementGroupPath(Name alias, Table<SupplementGroupRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SupplementGroupPath as(String alias) {
            return new SupplementGroupPath(DSL.name(alias), this);
        }

        @Override
        public SupplementGroupPath as(Name alias) {
            return new SupplementGroupPath(alias, this);
        }

        @Override
        public SupplementGroupPath as(Table<?> alias) {
            return new SupplementGroupPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<SupplementGroupRecord> getPrimaryKey() {
        return Keys.SUPPLEMENT_GROUP_PKEY;
    }

    private transient SupplementsPath _supplements;

    /**
     * Get the implicit to-many join path to the <code>public.supplements</code>
     * table
     */
    public SupplementsPath supplements() {
        if (_supplements == null)
            _supplements = new SupplementsPath(this, null, Keys.SUPPLEMENTS__SUPPLEMENTS_GROUP_NAME_FKEY.getInverseKey());

        return _supplements;
    }

    @Override
    public SupplementGroup as(String alias) {
        return new SupplementGroup(DSL.name(alias), this);
    }

    @Override
    public SupplementGroup as(Name alias) {
        return new SupplementGroup(alias, this);
    }

    @Override
    public SupplementGroup as(Table<?> alias) {
        return new SupplementGroup(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SupplementGroup rename(String name) {
        return new SupplementGroup(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SupplementGroup rename(Name name) {
        return new SupplementGroup(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SupplementGroup rename(Table<?> name) {
        return new SupplementGroup(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SupplementGroup where(Condition condition) {
        return new SupplementGroup(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SupplementGroup where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SupplementGroup where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SupplementGroup where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SupplementGroup where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SupplementGroup where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SupplementGroup where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SupplementGroup where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SupplementGroup whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SupplementGroup whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
